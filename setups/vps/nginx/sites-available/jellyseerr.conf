# Map HTTPS and HTTP schemes to set the HSTS header dynamically:
# - If the request uses HTTPS, set a Strict-Transport-Security header to enforce HTTPS for future requests.
# - If the request uses HTTP, leave the header empty to avoid sending HSTS on insecure connections.
map $scheme $hsts_header {
    https "max-age=63072000; includeSubDomains; preload";
    http  "";
}

# Determine the real client IP when using Cloudflare's CF-Connecting-IP header
map $http_cf_connecting_ip $real_ip { # detection if using cloudflare
    ""        $remote_addr;
    default   $http_cf_connecting_ip;
}


# Log format using the real client IP instead of Cloudflare's proxy IP 
# (requires cloudflare-realip.conf with set_real_ip_from)
log_format  jelly  '$real_ip - $remote_user [$time_local] "$request" '
				  '$status $body_bytes_sent "$http_referer" '
				  '"$http_user_agent" "$http_x_forwarded_for" $request_time $server_port';

server {
	isten 80;
	listen [::]:80;
	server_name suche.example.com;
	
	include snippets/dns-rebind-block.conf;         # Protect against DNS rebinding attacks
	include snippets/cloudflare-realip.conf;        # Configure trusted Cloudflare IPs

	return 301 https://$server_name$request_uri;    # Redirect HTTP to HTTPS
}

server {
	listen 443 ssl http2;
	listen [::]:443 ssl http2;
	server_name suche.example.com;
	
	include snippets/dns-rebind-block.conf;         # Protect against DNS rebinding attacks
	include snippets/cloudflare-realip.conf;        # Configure trusted Cloudflare IPs
	
	ssl_certificate     /etc/letsencrypt/live/suche.example.com/fullchain.pem;
	ssl_certificate_key /etc/letsencrypt/live/suche.example.com/privkey.pem;
	
	# Secure SSL configuration
	ssl_protocols TLSv1.2 TLSv1.3;
	ssl_prefer_server_ciphers on;
	ssl_ciphers "ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384";
	ssl_session_cache shared:SSL:10m;
	ssl_session_timeout 1h;
	
	resolver 1.1.1.1 1.0.0.1 valid=300s;            # Set DNS resolver with short TTL
	resolver_timeout 5s;
	
	add_header Strict-Transport-Security $hsts_header always;   # Enforce HSTS for HTTPS connections
	include snippets/common-headers.conf;                       # Security headers
	
	client_max_body_size 1M;                       # Limit request body size
	access_log /var/log/nginx/jellyseer_access.log jelly;
	error_log  /var/log/nginx/jellyseer_error.log warn;

	proxy_set_header Host $host;                    # Passes the requested domain name to the backend server.
	proxy_set_header Referer $http_referer;         # Pass original Referer header

	proxy_set_header X-Real-IP $real_ip;            # Pass real client IP to backend
	proxy_set_header X-Real-Port $remote_port;      # Pass client source port
	proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;	# Add client IP to X-Forwarded-For chain 
	proxy_set_header X-Forwarded-Proto $scheme;     # Pass original protocol (http/https)
	
	proxy_set_header X-Forwarded-Host $host:$remote_port; # Pass full host and port
	proxy_set_header X-Forwarded-Server $host;      # Pass server name
	proxy_set_header X-Forwarded-Port $remote_port; # Pass client port
	proxy_set_header X-Forwarded-Ssl on;            # Indicate SSL connection to backend

	# Applies ONLY to the specific path for Jellyfin authentication
	location /api/v1/auth/jellyfin {
		proxy_pass http://10.10.20.21:5055;

		# If the backend returns 401 or 500, redirect to internal @force401 location
		proxy_intercept_errors on;                  # Enable error interception for custom error handling
		error_page 500 = @force401;                 # Map 500 errors to custom 401 handler (e.g., admin account not allowed for remote access)
		error_page 401 = @force401;                 # Ensures consistent handling for real 401 errors

		proxy_hide_header X-Powered-By;             # Hide backend software version
	}

	# Main reverse proxy
	location / {
		proxy_pass http://10.10.20.21:5055;
		proxy_buffering off;                        # Stream responses immediately without buffering

		proxy_http_version 1.1;                     # Required for WebSocket or keep-alive support
		proxy_set_header Upgrade $http_upgrade;     # Support WebSocket upgrades
		proxy_set_header Connection $http_connection; # Maintain correct connection header for upgraded protocols
		proxy_hide_header X-Powered-By;             # Hide backend software version
		
		# Optional: block disallowed HTTP methods with 405 (Method Not Allowed)
		if ($request_method !~ ^(GET|HEAD|POST)$) {
			add_header Allow "GET, HEAD, POST";
			return 405;

			# Or just 'drop' (remove 'add_header Allow' above): 
			# return 444;
		}
	}

	# Internal location used for custom 401 responses
	location @force401 {
		default_type application/json;

		include snippets/common-headers.conf;       # Security headers
		
		return 401 '{"message":"INVALID_CREDENTIALS"}';
	}
}
